

#This indicates the version of the OpenAPI Specification being used. '2.0' refers to the second version of the specification.
swagger: '2.0'                                                            

#This section provides general information about the API:
info:                                                                     
  title: "Mechanic Shop API"                                              
  description: "This is an API to manage a mechanic shop system."       
  version: "1.0.0"                                                        

#The base URL of the API, in this case, "127.0.0.1:5000". This is where the API can be accessed.
host: "127.0.0.1:5000"                                                    

#The transfer protocol used byt the API, in this case, "http".
schemes:                                                                  
  - "http"

#The types of request body formats the API can consume. Here, it's "application/json", meaning the API can accept JSON-formatted request bodies.
consumes:                                                                 
  - "application/json"

#The types of response body formats the API can produce. Here, it's also "application/json", indicating that the API will respond with JSON-formatted data.
produces:                                                                 
  - "application/json"

#Security/Authentication
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "Enter your JWT token with the `Bearer ` prefix, e.g., `Bearer <your_token>`"


#PATHS - This is where you would define the endpoints of your API, along with the HTTP methods they support and their respective request/response formats.
#In this example, it's left empty, indicating that no paths have been defined yet.
paths:
#Customers
  /customers/login:
    #Customer login
    post:
      tags:
        - Customers
      summary: "Login endpoint (generates token)"
      description: "Validates customer credentials, generates and return a customer specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"   
          examples:
            application/json:
              token: "klajsdflkkjashdfkjhjkhsdf..."
              message: "Login successful"
              status: "success"

  /customers: 
    #Create new customer
    post: 
      tags:
        - Customers
      summary: "Create/register a new customer"
      description: "Endpoint to create a new customer in our Mechanic Shop system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new customer."
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          descriptions: "Successfull customer creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: "John Doe"
              phone: "123-456-7890"
              email: "johnd@email.com"
              password: "password123" 

    #Retrieve all customers
    get:
      tags:
        - Customers
      summary: "Retrieves all customers"
      description: "Endpoint to retrieve a list of all customers."
      responses:
        200:
          description: "Retrieved Customers Successfully"           
          schema:
            $ref: "#/definitions/AllCustomers"

  /{customer_id}:
    #Retrieve specific customer
    get:
      tags:
        - Customers
      summary: "Retrieve a specific customer"
      description: "Retrieve customer details using their customer ID"
      parameters:
        - in: "path"
          name: "customer_id"
          required: true
          type: "integer"
      responses:
        200:
          description: "Customer retrieved successfully"
          schema:
            $ref: "#definitions/Customer"
        400:
          description: "Customer not found"
          schema:
            type: "object"
            properties:
              error:
                type: "string"

    #Update customer
    put: 
      tags:
        - Customers
      summary: "Update a specific customer (login required)"
      description: "Endpoint to update a customer, this is a token authenticated route, and the customer must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Customer."
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          descriptions: "Successfully Updated customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: "Dohn Joe"
              phone: "123-456-7890"
              email: "dohnj@email.com"
              password: "password123"

    #Delete customer
    delete:
      tags:
        - Customers
      summary: "Delete a specific customer (login required)"
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted member"           
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "successfully deleted customer <customer_id>."

  /customers/my-tickets:
    #Retrieve customer tickets
    get:
      tags:
        - Customers
      summary: "Retrieve a customer's service tickets (login required)"
      description: "Returns all service tickets associated with the authenticated customer."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "A list of customer service tickets."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MyTicketsResponse"
        401:
          description: Unauthorized or missing token
          schema:
            type: "object"
            properties:
              error:
                type: "string"
                example: "Token is missing or invalid"


#Mechanics
  /mechanics:
    #Create a new mechanic
    post:
      tags:
        - "Mechanics"
      summary: "Create a new mechanic"
      description: "Adds a new mechanic to the system. Email must be unique."
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Mechanic information"
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Mechanic successfully created"
          schema:
            $ref: "#/definitions/Mechanic"
          examples:
            application/json:
              id: 1
              name: "John Doe"
              phone: "123-456-7890"
              email: "johnd@email.com"
              salary: "60000.00" 

    #Retrieve all mechanics
    get:
      tags:
        - Mechanics
      summary: "Retrieve all mechanics"
      description: "Returns a list of all mechanics."
      responses:
        200:
          description: "Successfully retrieved all mechanics"
          schema:
            $ref: "#/definitions/AllMechanics"


  /mechanics/{mechanic_id}:
    #Retrieve specific mechanic
    get:
      tags:
        - Mechanics
      summary: "Retrieve a specific mechanic"
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
      responses:
        200:
          description: "Mechanic found"
          schema:
            $ref: "#/definitions/Mechanic"
        400:
          description: "Mechanic not found"

    #Update mechanic
    put:
      tags:
        - Mechanics
      summary: "Update a specific mechanic"
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
        - in: "body"
          name: "body"
          required: true
          description: "Updated mechanic data"
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Mechanic updated"
          schema:
            $ref: "#/definitions/Mechanic"
        400:
          description: "Mechanic not found"

    #Delete mechanic
    delete:
      tags:
        - Mechanics
      summary: "Delete a specific mechanic"
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
      responses:
        200:
          description: "Mechanic deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        400:
          description: "Mechanic not found"

  /mechanics/popular:
    #Mechanics ranked by ticket assignment volume
    get:
      tags:
        - Mechanics
      summary: "Popular mechanics by service ticket volume"
      description: "Returns all mechanics sorted by the number of service tickets assigned."
      responses:
        200:
          description: "Mechanics sorted by popularity"
          schema:
            $ref: "#/definitions/AllMechanics"

  /mechanics/search:
    #Mechanic search by name
    get:
      tags:
        - Mechanics
      summary: "Search mechanics by name"
      description: "Find mechanics with names matching the search term."
      parameters:
        - in: "query"
          name: "name"
          required: true
          type: "string"
      responses:
        200:
          description: "Matching mechanics returned"
          schema:
            $ref: "#/definitions/AllMechanics"
        400:
          description: "Missing 'name' parameter"

#SERVICE TICKETS
  /service_tickets:
    #Create service ticket
    post: 
      tags:
        - Service Tickets
      summary: "Create a new service ticket"
      description: "Endpoint to create a new service ticket in our Mechanic Shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new service ticket."
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          descriptions: "Successfull service ticket creation"
          schema:
            $ref: "#/definitions/CreateServiceTicketResponse"
          examples:
            application/json:
              id: 1
              VIN: "123456789abcdefgh"
              customer_id: 1
              service_date: "2025-02-23"
              service_desc: "flat tire" 

    #Retrieve all service tickets  
    get:
      tags:
        - Service Tickets
      summary: "Retrieve all service tickets"
      description: "Returns a list of all service tickets"
      responses:
        200:
          description: "Successfully retrieved all service tickets"
          schema:
            $ref: "#/definitions/AllServiceTickets"


  /service_tickets/{service_ticket_id}:
    #Retrieve specific service ticket
    get:
      tags:
        - Service Tickets
      summary: "Retrieve a specific service ticket"
      description: "Endpoint to retrieve service ticket details using the service ticket ID"
      parameters:
        - in: "path"
          name: "service_ticket_id"
          type: "integer"
          required: true
      responses:
        200:
          description: "ServiceTicket found"
          schema:
            $ref: "#/definitions/ServiceTicket"
        400:
          description: "ServiceTicket not found"

    #Edit service ticket mechanic assignments
    put:
      tags:
        - Service Tickets
      summary: "Update mechanic assignments on a service ticket"
      description: "Endpoint to assign and/or remove mechanics to/from a service ticket using the service ticket ID"
      parameters:
        - in: "path"
          name: "service_ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/EditServiceTicketMechanicsPayload'
            examples:
              updateExample:
                summary: Update mechanic assignments
                value:
                  add_mechanic_ids: [1, 2]
                  remove_mechanic_ids: [3]
      responses:
        200:
          description: Successfully updated service ticket
          content:
            application/json:
              schema:
                $ref: '#/definitions/ServiceTicket'
        400:
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
              examples:
                validationError:
                  value:
                    add_mechanic_ids: ["Not a valid list"]
        404:
          description: Service ticket not found
          content:
            application/json:
              schema:
                $ref: '#/definitions/EditServiceTicketMechanicsResponse'
              examples:
                notFound:
                  value:
                    error: "Service ticket with ID 5 not found"

  /service_tickets/{service_ticket_id}/add-part/{part_id}:
    #Add part to service ticket
    put:
      tags:
        - Service Tickets
      summary: "Add a part to a service ticket"
      decsription: "Endpoint to add a part to a service ticket using part and service ticket IDs"
      parameters:
        - name: "service_ticket_id"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "part_id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "Part added successfully"
        400:
          description: "Part already added or bad request"
        404:
          description: "Service ticket or part not found"

#PARTS
    #Create a new part
    post: 
      tags:
        - Parts
      summary: "Create a new part"
      description: "Endpoint to create a new part in our Mechanic Shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new part."
          required: true
          schema:
            $ref: "#/definitions/CreatePartPayload"
      responses:
        201:
          descriptions: "Successful service ticket creation"
          schema:
            $ref: "#/definitions/CreatePartResponse"
          examples:
            application/json:
              id: 1
              name: "tire"
              price: "85.00"

    #Retrieve all parts
    get:
      tags:
        - Parts
      summary: "Retrieve all parts"
      description: "Retrieves a list of all parts"
      responses:
        200:
          description: "Successfully retrieved all parts"
          schema:
            $ref: "#/definitions/AllParts"

  /parts/{part_id}:
    #Retreive specific part
    get:
      tags:
        - Parts
      summary: "Retrieve a specific part"
      description: "Endpoint to retrieve part details using the part ID"
      parameters:
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
      responses:
        200:
          description: "Part found"
          schema:
            $ref: "#/definitions/Part"
        400:
          description: "Part not found"

    #Update a part
    put:
      tags:
        - Parts
      summary: "Update a specific part"
      description: "Endpoint to update a specific part using the part ID"
      parameters:
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
        - in: "body"
          name: "body"
          required: true
          description: "Updated part data"
          schema:
            $ref: "#/definitions/UpdatePartPayload"
      responses:
        200:
          description: "Part updated"
          schema:
            $ref: "#/definitions/Part"
          examples:
            application/json:
              id: 1
              name: "tire"
              price: "85.00"
        400:
          description: "Part not found"

    #Delete a part
    delete:
      tags:
        - Parts
      summary: "Delete a specific part"
      description: "Endpoint to delete a part by using the part id"
      responses:
        200:
          description: "Successfully deleted part"           
          schema:
            $ref: "#/definitions/DeletePartResponse"
          examples:
            application/json:
              message: "successfully deleted part <part_id>."


#DEFINITIONS - This is where you would define the data structures used in your API, such as request and response bodies.
#In this example, it's also left empty, indicating that no data structures have been defined yet.
definitions:
#CUSTOMER
  #Create New Customer
  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password

  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
        
  #Customer Login
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"

    required:
      - email
      - password

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  #Retrieve All Customers
  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        password:
          type: "string"

  #Retrieve Specific Customer
  GetCustomer:
    type: "object"
    properties:
      id:
        type: "integer"
      name: 
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password: 
        type: "string"

  #Update Customer
  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    
    required:
      - name
      - email
      - phone
      - password


  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  #Delete Customer
  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string" 

  #Retrieve Customer(My) Tickets
  MyTickets:
    type: "object"
    properties:
      id:
        type: "integer"
      VIN:
        type: "string"
      service_date:
        type: "date"
      service_desc:
        type: "string"
      customer_id:
        type: "integer"

#MECHANIC
  #Create Mechanic
  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary: 
        type: "number"
        format: "float"
    required:
      - name
      - email
      - phone
      - salary

  CreateMechanicResponse:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary: 
        type: "number"
        format: "float"

  #Retrieve All Mechanics
  AllMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        salary:
          type: "number"
          format: "float"

  #Retrieve Specific Mechanic
  GetMechanic:
    type: "object"
    properties:
      id:
        type: "integer"
      name: 
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary: 
        type: "number"
        format: "float"

  #Update Mechanic
  UpdateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"
    required:
      - name
      - email
      - phone
      - salary

  UpdateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"

  #Delete Mechanic
  DeleteMechnicResponse:
    type: "object"
    properties:
      message:
        type: "string" 

  Mechanic:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
        format: "float"
      service_tickets:
        type: "array"
        items:
          $ref: "#/definitions/MyTickets"

#--------------------------------------------------WIP-------------------------------------------------------------------
  #Create New Service Ticket
  CreateServiceTicketPayload:
    type: "object"
    properties:
      VIN:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      service_desc:
        type: "string"
      customer_id:
        type: "integer"
      
    required:
      - VIN
      - service_date
      - service_desc
      - customer_id


  CreateServiceTicketResponse:
    type: "object"
    properties:
      id:
        type: "string"
      VIN:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      service_desc:
        type: "string"
      customer_id:
        type: "int"


EditServiceTicketMechanicsPayload:
  type: "object"
  properties:
    add_mechanic_ids:
      type: "array"
      items:
        type: "integer"
    remove_mechanic_ids:
      type: "array"
      items:
        type: "integer"
  required:
    - add_mechanic_ids
    - remove_mechanic_ids

EditServiceTicketMechanicsResponse:
  type: "object"
  properties:
    error:
      type: "string"
      example: "Something went wrong"